// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean currentColour;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let currentColour = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < 8192 ) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColour = b;
        return;
    }

    /** Draws the (x, y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (y * 32) + (x / 16);
        let mask = Math.powerOfTwo(x & 15);     // Isolate bit position within word to be turned off/on
        if (currentColour) { let screen[address] = screen[address] | mask; }
        else { let screen[address] = screen[address] & ~mask; }
        return; 
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, tmp;

        // Always ensure x1 > x2 to make line draw from left to right
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) { do Screen.drawVerticalLine(x1, y1, y2); }
        else {
            if (dy = 0) { do Screen.drawHorizontalLine(x1, x2, y1); }
            else { do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy); }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while( ~(y > y2) ) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSqrd;
        let dy = -r;
        let rSqrd = r * r;

        while (~(dy > r)) {
            let dx = Math.sqrt(rSqrd - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** The following drawXXXline routines are not apart of the Screen API */
    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b, diff, i;
        let a = 0;
        let b = 0;
        let diff = 0;

        if (dy < 0) { let i = -1; }
        else { let i = 1; }

        while (~(a > dx) & (((i = 1) & ~(b > dy)) | ((i = -1) & ~(b < dy)))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + (dy * i);
            } else {
                let b = b + i;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int tmp;

        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int startAddr, endAddr, x1mod, x2mod;
        
        let x1mod = x1 & 15;
        let x2mod = x2 & 15;
        let startAddr = (y * 32) + (x1 / 16);
        let endAddr = (y * 32) + (x2 / 16) + (x2mod = 0);

        if (startAddr = endAddr) { do Screen.drawShortHorizontalLine(x1, x2, y); }      // Line starts and ends of same row
        else {
            if (~(x1mod = 0)) {
                let startAddr = startAddr + 1;
                do Screen.drawShortHorizontalLine(x1, x1 + 16 - x1mod, y);      // Start of line
            }
            if (~(x2mod = 0)) {
                let endAddr = endAddr - 1;
                do Screen.drawShortHorizontalLine(x2 - x2mod, x2, y);           // End of line
            }
            while (~(startAddr > endAddr)) {                                    // Middle of line
                let screen[startAddr] = currentColour;
                let startAddr = startAddr + 1;
            }
        }
        
        return;
    }

    function void drawShortHorizontalLine(int x1, int x2, int y) {
        while( ~(x1 > x2) ) {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
    
        return;
    }
}
