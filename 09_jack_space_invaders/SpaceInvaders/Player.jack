class Player {
    field int x, y, lives, score, imageWidth, imageHeight;
    field boolean isMovingLeft, isMovingRight;
    field Array bullets;

    constructor Player new(int shooterImageWidth, int shooterImageHeight) {
        let x = 256;
        let y = 230;
        let isMovingLeft = false;
        let isMovingRight = false;
        let bullets = Array.new(50);
        let lives = 3;
        let score = 0;
        let imageWidth = shooterImageWidth / 20;
        let imageHeight = shooterImageHeight / 20;
        return this;
    }

    method void update() {
        if (isMovingRight) { let x = x + 1; }
        if (isMovingLeft) { let x = x - 1; }
        do constrain();
        do updateBullets();
        return;
    }

    method void updateBullets() {
        var int i;
        var int newSize;
        var boolean hasHitAlienResult;
        var PlayerBullet bullet;
        var boolean offScreen;
        let newSize = 0;
        let i = 0;
    
        // Iterate through bullets array and update each bullet
        while (i < 50) {
            let bullet = bullets[i];
            if (~(bullet = null)) {
                do bullet.update();
    
                // Check for collision or if bullet is off-screen
                let hasHitAlienResult = hasHitAlien(bullet);
                if (hasHitAlienResult) {
                    let bullets[i] = null;
                } else {
                    let offScreen = bullet.isOffScreen();
                    if (offScreen) {
                        let bullets[i] = null;
                    } else {
                        let bullets[newSize] = bullets[i];
                        let newSize = newSize + 1;
                    }
                }
            }
            let i = i + 1;
        }
    
        while (newSize < 50) {
            let bullets[newSize] = null;
            let newSize = newSize + 1;
        }
        return;
    }
    
    method boolean hasHitAlien(PlayerBullet bullet) {
        var Invaders invader;
        var int bulletX;
        var int bulletY;
        var boolean returnVar;
        let bulletX = bullet.getX();
        let bulletY = bullet.getY();
        let invader = Invaders.new(5, 10);
        let returnVar = invader.checkCollision(bulletX, bulletY);
        return returnVar;
    }

    method void constrain() {
        if (x < 0) {
            let x = 0;
        }
        if (x > 512 - imageWidth) {
            let x = 512 - imageWidth;
        }
        return;
    }

    method void draw() {
        var int location;
        let location = y * 32 + x / 16;
        do Memory.poke(16384 + location, 8);
        do Memory.poke(16384 + location + 32, 62);
        do Memory.poke(16384 + location + 64, 127);
        do Memory.poke(16384 + location + 96, 127);

        do drawBullets();
        return;
    }

    method void drawBullets() {
        var int i;
        var PlayerBullet bullet;
        let i = 0;
        while (i < 50) {
            if (~(bullets[i] = null)) {
                let bullet = bullets[i];
                do bullet.draw();
            }
            let i = i + 1;
        }
        return;
    }

    method void drawLives() {
        var int i;
        var int location;

        do Output.moveCursor(1, 25);
        do Output.printString("LIVES");
        let i = 0;

        while (i < lives) {
            let location = (10 * 32) + ((300 + (i * 30)) / 16);
            do Memory.poke(16384 + location, 8);
            do Memory.poke(16384 + location + 32, 62);
            do Memory.poke(16384 + location + 64, 127);
            do Memory.poke(16384 + location + 96, 127);
            let i = i + 1;
        }
        return;
    }

    method void drawScore() {
        do Output.moveCursor(1, 5);
        do Output.printString("SCORE");
        do Output.moveCursor(1, 11);
        do Output.printInt(score);
        return;
    }

    method void moveLeft() {
        let isMovingRight = false;
        let isMovingLeft = true;
        return;
    }

    method void moveRight() {
        let isMovingLeft = false;
        let isMovingRight = true;
        return;
    }

    method void shoot() {
        var PlayerBullet newBullet;
        var int i;

        let newBullet = PlayerBullet.new(x + 12, y);
        let i = 0;

        while (i < 50) {
            if (bullets[i] = null) {
                let bullets[i] = newBullet;
                return;
            }
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
