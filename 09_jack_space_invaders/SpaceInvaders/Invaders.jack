class Invaders {
    field int rowsCount, y, speed, arrCounter, timeSinceLastBullet;
    field Array aliens, bullets;
    field boolean direction;
    field Random random;

    constructor Invaders new(int rows, int randomSeed) {
        let rowsCount = rows;
        let direction = false;
        let y = 40;
        let aliens = initialiseAliens();
        let speed = 1;
        let arrCounter = rowsCount * ((512 - 80) / 30);                       // Initialize arrCounter to the total number of aliens
        let bullets = Array.new(50);                                               // Pre-allocate space for bullets
        let timeSinceLastBullet = 0;
        let random = Random.new(randomSeed);
        return this;
    }


    method void update() {
        var int updateCounter;
        var boolean hasChanged;
        var Alien bottomAliens;
        var Alien instanceAlien;
        var Player player;
        let updateCounter = 0;

        let player = Player.new(20, 20);

        // Move aliens horizontally
        while (updateCounter < arrCounter) {
            let instanceAlien = aliens[updateCounter];

            if (direction) { do instanceAlien.setX(instanceAlien.getX() + speed); }              // Move right along X-axis
            else { do instanceAlien.setX(instanceAlien.getX() - speed); }                                    // Move left along X-axis
            let updateCounter = updateCounter + 1;
        }

        // Check if direction has changed, move aliens down
        let hasChanged = hasChangedDirection();
        if (hasChanged) { do moveAlienDown(); }

        // If no more aliens, advance to next level
        if (arrCounter = 0) { do nextLevel(); }

        // Handle alien shooting bullets
        if ((timeSinceLastBullet > 40) | (timeSinceLastBullet = 40)) {
            let bottomAliens = getBottomAliens();
            if (~(bottomAliens = null)) { do makeABottomAlienShoot(bottomAliens); }
        }
        let timeSinceLastBullet = timeSinceLastBullet + 1;

        do player.updateBullets();
        return;
    }


    method void nextLevel() {
        // Increase the speed of the aliens
        let speed = speed + 1;
        // Reinitialize the aliens array
        let aliens = initialiseAliens();
        let arrCounter = rowsCount * ((512 - 80) / 30);
        return;
    }


    method boolean hasChangedDirection() {
        var int updateCounter;
        var Alien instanceAlien;
        var int leftCondition;
        var int rightCondition;
        let updateCounter = 0;
        
        while (updateCounter < arrCounter) {
            let instanceAlien = aliens[updateCounter];
            let leftCondition = instanceAlien.getX();
            if ((leftCondition = 512 - 40) | (leftCondition > 512 - 40)) {
                let direction = false;                                                  // Change direction to left
                return true;
            }
            let updateCounter = updateCounter + 1;
        }
        return false;
    }


    method void moveAlienDown() {
        var int updateCounter;
        var Alien instanceAlien;
        var int alienY;
        let updateCounter = 0;
        
        while (updateCounter < arrCounter) {
            let instanceAlien = aliens[updateCounter];
            let alienY = instanceAlien.getY();
            do alien.setY(alienY + 10);               // Move down by 10 units
            let updateCounter = updateCounter + 1;
        }
        return;
    }


    method Array getBottomAliens() {
        var Array allXPositions;
        var Array aliensAtTheBottom;
        var int xPosIndex;
        var int bestYPosition;
        var Alien lowestAlien;
        var int alienIndex;
        var Alien alienObj;
        var int alienY;
        var int alienX;
    
        // Get all unique X positions of aliens
        let allXPositions = getAllXPositions();
        let aliensAtTheBottom = Array.new(rowsCount);
        let xPosIndex = 0;
    
        // For each X position, find lowest alien
        while (xPosIndex < rowsCount) {
            let bestYPosition = 0;
            let lowestAlien = null;
            let alienIndex = 0;
    
            while (alienIndex < arrCounter) {
                let alienObj = aliens[alienIndex];
                let alienY = alienObj.getY();
                let alienX = alienObj.getX();
    
                if (alienX = allXPositions[xPosIndex]) {
                    if (alienY > bestYPosition) {
                        let bestYPosition = alienY;
                        let lowestAlien = aliens[alienIndex];
                    }
                }
                let alienIndex = alienIndex + 1;
            }
    
            if (~(lowestAlien = null)) {
                let aliensAtTheBottom[xPosIndex] = lowestAlien;
            }
            let xPosIndex = xPosIndex + 1;
        }
    
        return aliensAtTheBottom;
    }
    

    method Array getAllXPositions() {
        var Array allXPositions;
        var int alienIndex;
        var Alien alienObj;
        var int alienX;

        let allXPositions = Array.new(arrCounter);
        let alienIndex = 0;

        while (alienIndex < arrCounter) {
            let alienObj = aliens[alienIndex];
            let alienX = alienObj.getX();
            let allXPositions[alienIndex] = alienX;
            let alienIndex = alienIndex + 1;
        }

        return allXPositions;
    }


    method Array initialiseAliens() {
        var Array updateAliens;
        var int updateY;
        var int updateX;
        var int counterI;
        var int index;

        let updateY = 40;
        let counterI = 0;
        let index = 0;
        let updateAliens = Array.new(rowsCount * ((512 - 80) / 30));             // Calculate num of aliens, - 80 to account for margins, / 30 for 30 aliens per row

        // Add new correctly positioned alien object
        while (counterI < rowsCount) {
            let updateX = 40;
            while (updateX < 512 - 40) {
                let updateAliens[index] = Alien.new(updateX, updateY);
                let updateX = updateX + 30;                                           // Increment by 30 to place next alien 30 pixels to the right of previous one                                    
                let index = index + 1;
            }
            let updateY = updateY + 40;                                               // Increment by 40 to place next row of aliens 40 pixels below previous row
            let counterI = counterI + 1;
        }
        return updateAliens;
    }


    method void draw() {
        var int updateCounter;
        var AlienBullet bullet;
        var Alien alienObj;
        let updateCounter = 0;
        
        // Draw bullets to appear underneath aliens first
        while (updateCounter < timeSinceLastBullet) {
            if (~(bullets[updateCounter] = null)) {
                let bullet = bullets[updateCounter];
                do bullet.draw();
            }
            let updateCounter = updateCounter + 1;
        }

        // Draw the aliens
        let updateCounter = 0;
        while (updateCounter < arrCounter) {
            let alienObj = aliens[updateCounter];
            do alienObj.draw();
            let updateCounter = updateCounter + 1;
        }

        return;
    }


    method boolean checkCollision(int x, int y) {
        var int decrementCounter;
        var Alien currentAlien;
        var int alienX, alienY;
        var int distanceSquared;
        var int dx, dy;
        var int i;
        let decrementCounter = arrCounter - 1;

        // Check collision with aliens
        while ((decrementCounter > 0) | (decrementCounter = 0)) {
            let currentAlien = aliens[decrementCounter];
            let alienX = currentAlien.getX() + 11;                                   // Offset for center of alien obj
            let alienY = currentAlien.getY() + 8;                                    // Offset for center of alien obj
            let dx = alienX - x;
            let dy = alienY - y;
            let distanceSquared = (dx * dx) + (dy * dy);                            // sqrt(((x2 - x1) ** 2 ) + ((y2 - y1) ** 2))

            // if distanceSquare < 10 ** 2, collision detected
            if (distanceSquared < 100) {
                let i = decrementCounter;

                // Remove aliens by shifting elements
                while (i < arrCounter - 1) {
                    let aliens[i] = aliens[i + 1];
                    let i = i + 1;
                }

                // Collision detected
                let arrCounter = arrCounter - 1;
                return true;
            }
            let decrementCounter = decrementCounter - 1;
        }
        return false;
    }

    method void makeABottomAlienShoot(Array bottomAliens) {
        var int randomIndex;
        var Alien shootingAlien;
        var AlienBullet newBullet;
        var int bottomAliensCount;
        var int alienX;
        var int alienY;

        // Calculate the length of bottomAliens
        let bottomAliensCount = 0;
        while (bottomAliensCount < rowsCount) {
            if (~(bottomAliens[bottomAliensCount] = null)) { let bottomAliensCount = bottomAliensCount + 1; } 
            else { let bottomAliensCount = rowsCount; }
        }

        // Generate a random index
        let randomIndex = random.nextInt(bottomAliensCount);
        let shootingAlien = bottomAliens[randomIndex];     
                                             // Get the shooting alien
        let newBullet = AlienBullet.new((shootingAlien.getX() + 10), (shootingAlien.getY() + 10));  
        let bullets[timeSinceLastBullet] = newBullet;                                 // Add the new bullet to the bullets array
        let timeSinceLastBullet = 0;                                                       // Reset the bullet timer
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}