// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Workout current instruction
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxOut1);
    Mux(a=true, b=false, sel=instruction[15], out=cinstruct);
    Or(a=instruction[5], b=cinstruct, out=loadAreg);
    ARegister(in=muxOut1, load=loadAreg, out=aRegOut, out[0..14]=addressM);

    // Operation of the ALU
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=muxOut2);
    And(a=instruction[4], b=instruction[15], out=loadDreg);
    DRegister(in=aluOut, load=loadDreg, out=dRegOut);
    ALU(x=dRegOut, y=muxOut2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Any conditional, if condition true PC = aRegOut else PC++
    // JGT [001]
    Or(a=zr, b=ng, out=zrng);
    Mux(a=true, b=false, sel=zrng, out=pos);
    And(a=pos, b=instruction[0], out=loadJGT);
    
    // JEQ [010]
    Mux(a=false, b=true, sel=zr, out=jeq);
    And(a=jeq, b=instruction[1], out=loadJEQ);

    // JGE [011]
    Or(a=pos, b=zr, out=jge);
    And(a=instruction[0], b=instruction[1], out=jgeCond);
    And(a=jge, b=jgeCond, out=loadJGE);
    
    // JLT [100]
    Mux(a=false, b=true, sel=ng, out=jlt);
    And(a=instruction[2], b=jlt, out=loadJLT);

    // JNE [101]
    Mux(a=true, b=false, sel=zr, out=jne);
    And(a=instruction[2], b=instruction[0], out=jneCond);
    And(a=jne, b=jneCond, out=loadJNE);

    // JLE [110]
    Or(a=zr, b=ng, out=jle);
    And(a=instruction[2], b=instruction[1], out=jleCond);
    And(a=jle, b=jleCond, out=loadJLE);

    // JMP [111]
    And(a=jleCond, b=instruction[0], out=jmpCond);
    Mux(a=false, b=true, sel=jmpCond, out=jmp);

    // Conditional logic
    Or8Way(in[0]=loadJGT, in[1]=loadJEQ, in[2]=loadJGE, in[3]=loadJLT, in[4]=loadJNE, in[5]=loadJLE, in[6]=jmp, in[7]=false, out=orConds);
    And(a=orConds, b=instruction[15], out=loadBit);
    Not(in=loadBit, out=incBit);
    PC(in=aRegOut, load=loadBit, inc=incBit, reset=reset, out[0..14]=pc);
}